controller
using AutoMapper;
using Microsoft.AspNetCore.Mvc;
using Microsoft.IdentityModel.Tokens;
using Newtonsoft.Json;
using Project_STSBackend.Data.Auth;
using Project_STSBackend.Data.Repositories;
using Project_STSBackend.Helper.Model;
using Project_STSBackend.Helper.ViewModel;

namespace Project_STSBackend.Controllers
{
    public class MenuMasterController : Controller
    {
        private readonly IMenuMasterRepository _menumasterRepository;
        private readonly IPageRepository _pageRepository;
        private readonly IMapper _mapper;
        private readonly IUnitOfWork _unitOfWork;
        private readonly AuthHelper _authHelper;
        int loginUserId = 0;
        int siteid = 0;
        public MenuMasterController(AuthHelper authHelper, IPageRepository pageRepository, IMenuMasterRepository menumasterRepositoryRepository, IUnitOfWork unitOfWork, IMapper mapper)
        {
            _menumasterRepository = menumasterRepositoryRepository;
            _pageRepository = pageRepository;
            _unitOfWork = unitOfWork;
            _authHelper = authHelper;
            _mapper = mapper;

            var loginUserData = _authHelper.LoginUserData();
            if (loginUserData.UserId > 0)
            {
                loginUserId = loginUserData.UserId;
                siteid = loginUserData.SiteId;
            }
        }

        [HttpGet]
        public IActionResult Index()
        {
            var menu = _menumasterRepository.GetAllMenuMaster(siteid);
            var menuviewmodel = _mapper.Map<List<MenuMasterListViewModel>>(menu);

            return View(menuviewmodel);
        }

        [HttpGet]
        public IActionResult CreateMenu()
        {
            var vm = new MenuMasterViewModel();
            vm.PageList = _pageRepository.GetPages();

            return View(vm);
        }

        [HttpPost]
        public IActionResult CreateMenu(MenuMasterViewModel menuMasterView)
        {
            try
            {
                if (menuMasterView != null)
                {
                    if (_menumasterRepository.Table.Any(x => x.Slug == menuMasterView.Slug))
                    {
                        return Json(new { result = "Error", value = "This Menu Slug already exists! Enter another name" });
                    }
                    menuMasterView.CreatedBy = loginUserId;
                    menuMasterView.SiteId = siteid;

                    var menu = _mapper.Map<MenuMasterModel>(menuMasterView);
                    _menumasterRepository.InsertAsync(menu);
                    _unitOfWork.CommitAsync();
                    return Json(new { result = "Success", value = "Menu Created Successfully." });
                }
                else
                {
                    return Json(new { result = "Error", value = "Invalid data received" });
                }
            }
            catch
            {
                return Json(new { result = "Error", value = "Invalid data received" });
            }
        }

        [HttpGet]
        public IActionResult EditMenu(int id)
        {
            var menuview = new MenuMasterViewModel();

            if (id != 0)
            {
                var menu = _menumasterRepository.Get(id);

                if (menu != null)
                {
                    menuview = _mapper.Map<MenuMasterViewModel>(menu);
                    menuview.PageList = _pageRepository.GetPages();
                }
                return View(menuview);
            }
            return View(menuview);
        }


        [HttpPost]
        public IActionResult EditMenu(MenuMasterViewModel menuMasterView)
        {
            try
            {
                if (menuMasterView != null)
                {
                    var IsMenu = _menumasterRepository.CheckUniqueSlug(menuMasterView.MenuMasterId, menuMasterView.Slug);
                    if (IsMenu)
                    {
                        return Json(new { result = "Error", value = "This Menu Slug already exists! Enter another name" });
                    }

                    menuMasterView.ModifiedBy = loginUserId;

                    var menu = _mapper.Map<MenuMasterModel>(menuMasterView);
                    _menumasterRepository.Update(menu);
                    _unitOfWork.CommitAsync();
                    return Json(new { result = "Success", value = "Menu Updated Successfully." });
                }
                else
                {
                    return Json(new { result = "Error", value = "Invalid data received" });
                }
            }
            catch
            {
                return Json(new { result = "Error", value = "Invalid data received" });
            }
        }


        [HttpGet]
        public JsonResult GetPagesByMenuId(int menumasterid)
        {
            if (menumasterid > 0)
            {
                var menumaster = _menumasterRepository.Get(menumasterid);

                if (!string.IsNullOrEmpty(menumaster.PageIds))
                {
                    //var pagelist = _pageRepository.GetPages(menumaster.PageIds);
                    var pagelist = JsonConvert.DeserializeObject<List<PageViewListModel>>(menumaster.PageIds);
                    if (pagelist != null)
                    {
                        return Json(new { result = "Error", value = pagelist });
                    }
                }

                return Json(new { result = "error" });
            }
            return Json(new { result = "Error" });
        }

        [HttpPost]
        public async Task<IActionResult> DeleteMenuById(int id)
        {
            try
            {
                var menu = _menumasterRepository.Get(id);
                _menumasterRepository.Delete(menu);
                await _unitOfWork.CommitAsync();
                return Ok();
            }
            catch
            {
                return View();
            }
        }
    }
}

edit

	@model Project_STSBackend.Helper.ViewModel.MenuMasterViewModel


<style>
    /**
                                *  Nestable css
                                */
    .dd {
        position: relative;
        display: block;
        margin: 0;
        padding: 0;
        max-width: 600px;
        list-style: none;
        font-size: 13px;
        line-height: 20px;
    }

    .dd-list {
        display: block;
        position: relative;
        margin: 0;
        padding: 0;
        list-style: none;
    }

        .dd-list .dd-list {
            padding-left: 30px;
        }

    .dd-collapsed .dd-list {
        display: none;
    }

    .dd-item,
    .dd-empty,
    .dd-placeholder {
        display: block;
        position: relative;
        margin: 0;
        padding: 0;
        min-height: 20px;
        font-size: 13px;
        line-height: 20px;
    }

    .dd-handle {
        display: block;
        height: 30px;
        margin: 5px 0;
        padding: 5px 10px;
        color: #333;
        text-decoration: none;
        font-weight: bold;
        border: 1px solid #ccc;
        background: #fafafa;
        background: -webkit-linear-gradient(top, #fafafa 0%, #eee 100%);
        background: -moz-linear-gradient(top, #fafafa 0%, #eee 100%);
        background: linear-gradient(top, #fafafa 0%, #eee 100%);
        -webkit-border-radius: 3px;
        border-radius: 3px;
        box-sizing: border-box;
        -moz-box-sizing: border-box;
        cursor: move;
        margin: 0 0 10px;
        background: #dbdbdb;
        /*    color: #6f6f6f;*/
        padding: 5px 12px
    }

        .dd-handle:hover {
            color: #2ea8e5;
            background: #fff;
        }

    .dd-item > button {
        /*  display: block;
                                  position: relative;
                                  cursor: pointer;
                                  float: left;
                                  width: 25px;
                                  height: 20px;
                                  margin: 5px 0;
                                  padding: 0;
                                  text-indent: 100%;
                                  white-space: nowrap;
                                  overflow: hidden;
                                  border: 0;
                                  background: transparent;
                                  font-size: 12px;
                                  line-height: 1;
                                  text-align: center;
                                  font-weight: bold;*/
        position: relative;
        cursor: pointer;
        float: left;
        width: 25px;
        height: 30px;
        margin: 0px 0px;
        padding: 0;
        text-indent: 100%;
        white-space: nowrap;
        overflow: hidden;
        border: 0;
        background: #4CAF50;
        font-size: 12px;
        line-height: 1;
        color: #fff;
        text-align: center;
        font-weight: bold;
    }

        .dd-item > button:before {
            content: '+';
            display: block;
            position: absolute;
            width: 100%;
            text-align: center;
            text-indent: 0;
        }

        .dd-item > button[data-action="collapse"]:before {
            content: '-';
        }

    .dd-placeholder,
    .dd-empty {
        margin: 5px 0;
        padding: 0;
        min-height: 30px;
        background: #f2fbff;
        border: 1px dashed #b6bcbf;
        box-sizing: border-box;
        -moz-box-sizing: border-box;
    }

    .dd-empty {
        border: 1px dashed #bbb;
        min-height: 100px;
        background-color: #e5e5e5;
        background-image: -webkit-linear-gradient(45deg, #fff 25%, transparent 25%, transparent 75%, #fff 75%, #fff), -webkit-linear-gradient(45deg, #fff 25%, transparent 25%, transparent 75%, #fff 75%, #fff);
        background-image: -moz-linear-gradient(45deg, #fff 25%, transparent 25%, transparent 75%, #fff 75%, #fff), -moz-linear-gradient(45deg, #fff 25%, transparent 25%, transparent 75%, #fff 75%, #fff);
        background-image: linear-gradient(45deg, #fff 25%, transparent 25%, transparent 75%, #fff 75%, #fff), linear-gradient(45deg, #fff 25%, transparent 25%, transparent 75%, #fff 75%, #fff);
        background-size: 60px 60px;
        background-position: 0 0, 30px 30px;
    }

    .dd-dragel {
        position: absolute;
        pointer-events: none;
        z-index: 9999;
    }

        .dd-dragel > .dd-item .dd-handle {
            margin-top: 0;
        }

        .dd-dragel .dd-handle {
            -webkit-box-shadow: 2px 4px 6px 0 rgba(0, 0, 0, .1);
            box-shadow: 2px 4px 6px 0 rgba(0, 0, 0, .1);
        }

    /**
                                * Nestable Extras
                                */
    .nestable-lists {
        display: block;
        clear: both;
        padding: 30px 0;
        width: 100%;
        border: 0;
        border-top: 2px solid #ddd;
        border-bottom: 2px solid #ddd;
    }

    #nestable-menu {
        padding: 0;
        margin: 20px 0;
    }

    #nestable-output,
    #nestable2-output {
        width: 100%;
        height: 7em;
        font-size: 0.75em;
        line-height: 1.333333em;
        font-family: Consolas, monospace;
        padding: 5px;
        box-sizing: border-box;
        -moz-box-sizing: border-box;
    }

    #nestable2 .dd-handle {
        color: #fff;
        border: 1px solid #999;
        background: #bbb;
        background: -webkit-linear-gradient(top, #bbb 0%, #999 100%);
        background: -moz-linear-gradient(top, #bbb 0%, #999 100%);
        background: linear-gradient(top, #bbb 0%, #999 100%);
    }

        #nestable2 .dd-handle:hover {
            background: #bbb;
        }

    #nestable2 .dd-item > button:before {
        color: #fff;
    }

    .dd {
        // float: left;
        // width: 48 %;
        width: 80%;
    }

        .dd + .dd {
            margin-left: 2%;
        }

    .dd-hover > .dd-handle {
        background: #2ea8e5 !important;
    }

    /**
                                * Nestable Draggable Handles
                                */
    .dd3-content {
        display: block;
        height: 30px;
        margin: 5px 0;
        padding: 5px 10px 5px 40px;
        color: #333;
        text-decoration: none;
        font-weight: bold;
        border: 1px solid #ccc;
        background: #fafafa;
        background: -webkit-linear-gradient(top, #fafafa 0%, #eee 100%);
        background: -moz-linear-gradient(top, #fafafa 0%, #eee 100%);
        background: linear-gradient(top, #fafafa 0%, #eee 100%);
        -webkit-border-radius: 3px;
        border-radius: 3px;
        box-sizing: border-box;
        -moz-box-sizing: border-box;
    }

        .dd3-content:hover {
            color: #2ea8e5;
            background: #fff;
        }

    .dd-dragel > .dd3-item > .dd3-content {
        margin: 0;
    }

    .dd3-item > button {
        margin-left: 30px;
    }

    .dd3-handle {
        position: absolute;
        margin: 0;
        left: 0;
        top: 0;
        cursor: pointer;
        width: 30px;
        text-indent: 100%;
        white-space: nowrap;
        overflow: hidden;
        border: 1px solid #aaa;
        background: #ddd;
        background: -webkit-linear-gradient(top, #ddd 0%, #bbb 100%);
        background: -moz-linear-gradient(top, #ddd 0%, #bbb 100%);
        background: linear-gradient(top, #ddd 0%, #bbb 100%);
        border-top-right-radius: 0;
        border-bottom-right-radius: 0;
    }

        .dd3-handle:before {
            content: '≡';
            display: block;
            position: absolute;
            left: 0;
            top: 3px;
            width: 100%;
            text-align: center;
            text-indent: 0;
            color: #fff;
            font-size: 20px;
            font-weight: normal;
        }

        .dd3-handle:hover {
            background: #ddd;
        }


    /*
                                * Nestable++
                                */
    .button-delete {
        position: absolute;
        top: 4px;
        right: -26px;
    }

    .button-edit {
        position: absolute;
        top: 4px;
        right: -52px;
    }

    #menu-editor {
        margin-top: 40px;
    }

    #saveButton {
        padding-right: 30px;
        padding-left: 30px;
    }

    .output-container {
        margin-top: 20px;
    }

    #json-output {
        margin-top: 20px;
    }

</style>
<body>
    <h4>Edit Menu</h4>

    <form method="post" asp-action="EditMenu" id="frmUpdateMenu">
        <div class="form-group">
            @Html.HiddenFor(model => model.MenuMasterId)
            @Html.HiddenFor(model => model.CreatedBy)
            @Html.HiddenFor(model => model.CreatedDate)
            @Html.HiddenFor(model => model.SiteId)
        </div>
        <div class="row">
            <div class="col-sm-6">
                <div>
                    @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "" })<span class="asterisk">*</span>
                    @Html.EditorFor(m => m.Name, new { htmlAttributes = new { @class = "form-control", @id = "Name" } })
                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-sm-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.Slug, htmlAttributes: new { @class = "" })<span class="asterisk">*</span>
                    @Html.EditorFor(m => m.Slug, new { htmlAttributes = new { @class = "form-control", @id = "Slug", placeholder = "Slug", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.Slug, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-12">
                <div class="form-group">
                    @Html.LabelFor(model => model.PageIds, htmlAttributes: new { @class = "" })<span class="asterisk">*</span><br />
                    @Html.DropDownListFor(m => m.PageIds, new SelectList(Model.PageList, "Id", "Name"), "Select", new { htmlAttributes = new { @class = "form-control select2" }, @id = "PageId", multiple = "multiple" })
                    @Html.ValidationMessageFor(model => model.PageIds, "", new { @class = "text-danger" })
                </div>
            </div>

        </div>

        <div class="col-md-12">

            <div class="dd nestable m-auto mb-2" id="nestable">
                <ol class="dd-list">
                </ol>
            </div>
        </div>

        <div class="mt-3">
            <div class="form-group">
                <input type="button" value="Update" id="MenuUpdate" class="btn btn-success" />
                <a href="@Url.Action("Index","MenuMaster")" class="btn btn-secondary">Back to List</a>
            </div>
        </div>

    </form>
</body>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/Nestable/2012-10-15/jquery.nestable.min.js"></script>

<script>
    $(document).ready(function () {

        function toSlug(text) {
            return text.replace(/[^a-zA-Z0-9\s]/g, '').toLowerCase().replace(/\s+/g, '-');
        }

        $("#Name").on('input', function () {
            var Name = $(this).val();
            $("#Slug").val(toSlug(Name));
        });

        $("#PageId").select2();

        // var MenuMasterId = $("#MenuMasterId").val();
        // $.ajax({
        //     type: "GET",
        //     url: '@Url.Action("GetPagesByMenuId", "MenuMaster")',
        //     data: { menumasterid: MenuMasterId },
        //     contentType: "application/json; charset=utf-8",
        //     dataType: "json",
        //     success: function (data) {

        //     },
        //     failure: function () {
        //         alert("Failed!");
        //     }
        // });

        var preSelectPage = @Html.Raw(Json.Serialize(Model.PageIds));
        var preSelectPageData = JSON.parse(preSelectPage);

        // Set pre-selected values in the dropdown
        $('#PageId').val(preSelectPageData.map(item => item.PageId)).trigger('change');

        function createListItem(id, name, children) {
            var li = $('<li>', {
                'class': 'dd-item',
                'data-id': id,
                'data-name': name,
                'data-slug': toSlug(name) + '-slug',
                'data-new': '0',
                'data-deleted': '0'
            });

            var div = $('<div>', {
                'class': 'dd-handle',
                'text': name
            }).appendTo(li);

            if (children && children.length > 0) {
                var nestedList = $('<ol>', {
                    'class': 'dd-list'
                }).appendTo(li);
                children.forEach(function (child) {
                    var childItem = createListItem(child.PageId, child.PageName, child.children);
                    nestedList.append(childItem);
                });
            }

            return li;
        }

        function buildNestedList(data) {
            var nestableList = $('#nestable .dd-list');
            nestableList.empty();

            data.forEach(function (item) {
                var listItem = createListItem(item.PageId, item.PageName, item.children);
                nestableList.append(listItem);
            });
        }
        buildNestedList(preSelectPageData);

        // var preSelectPage = @Html.Raw(Json.Serialize(Model.PageIds));
        // var preSelectPageData = JSON.parse(preSelectPage);

        // $('#PageId').val(preSelectPageData).trigger('change');
        // $.each(preSelectPageData, function (i, item) {
        //     $('#PageId option[value="' + preSelectPageData[i].PageId + '"]').attr('selected', true).trigger('change');

        //     var nestableList = $('#nestable .dd-list');
        //     nestableList.empty();

        //     var selectedText = preSelectPageData[i].;
        //     var selectedValue = preSelectPageData[i].PageName;

        //         var existingItem = nestableList.find(`.dd-item[data-id='${selectedValue}']`);
        //         if (existingItem.length === 0) {
        //             var li = createListItem(selectedValue, selectedText, []);
        //             nestableList.append(li);
        //         }
        // });
        debugger;


        $('#PageId').on('change', function () {
            var selectedOptions = $(this).find('option:selected');
            var nestableList = $('#nestable .dd-list');
            nestableList.empty();

            selectedOptions.each(function () {
                var selectedText = $(this).text();
                var selectedValue = $(this).val();

                var existingItem = nestableList.find(`.dd-item[data-id='${selectedValue}']`);
                if (existingItem.length === 0) {
                    var li = createListItem(selectedValue, selectedText, []);
                    nestableList.append(li);
                }
            });
        });


        function createListItem(id, name, children) {
            var li = document.createElement("li");
            li.className = 'dd-item';
            li.dataset.id = id;
            li.dataset.name = name;
            li.dataset.slug = toSlug(name) + '-slug';
            li.dataset.new = '0';
            li.dataset.deleted = '0';

            var div = document.createElement("div");
            div.className = "dd-handle";
            div.innerHTML = name;
            li.appendChild(div);

            if (children && children.length > 0) {
                var nestedList = document.createElement("ol");
                nestedList.className = "dd-list";
                children.forEach(function (child) {
                    var childItem = createListItem(child.PageId, child.PageName, child.children);
                    nestedList.appendChild(childItem);
                });
                li.appendChild(nestedList);
            }

            return li;
        }



        $('#MenuUpdate').on('click', function () { generateJSON(); });

        function generateJSON() {
            var nestableList = $('#nestable .dd-list');

            function parseListItems(list) {
                var result = [];

                list.children('li').each(function () {
                    var $li = $(this);
                    var item = {
                        PageId: $li.data('id'),
                        PageName: $li.data('name'),
                        PageSlug: $li.data('slug'),
                        new: $li.data('new'),
                        deleted: $li.data('deleted'),
                        children: parseListItems($li.find('> .dd-list'))
                    };

                    result.push(item);
                    return result;
                });
            }

            jsonPageData = parseListItems(nestableList);
            // alert(JSON.stringify(jsonPageData));
        }


    });


    $(document).undelegate('#MenuUpdate', "click").delegate("#MenuUpdate", "click", function (e) {

        e.preventDefault();
        var isformvalid = true;

        $('#frmUpdateMenu').each(function () {
            if (!isEditUserFormValid($(this))) {
                isformvalid = false;
            }
        });

        if (!isformvalid) {
            return false;
        }

        if (isformvalid) {
            var pageId = $("#PageId").val().toString();
            $("#PageId").val(pageId);

            var formdata = new FormData($('#frmUpdateMenu')[0]);
            formdata.append($(this).attr("name"), $(this).attr("name"));
            formdata.append('PageIds', JSON.stringify(jsonPageData));
            $.ajax({
                method: "POST",
                url: "@Url.Action("EditMenu", "MenuMaster")",
                processData: false,
                contentType: false,
                data: formdata,
                success: function (response) {
                    if (response.result == "Success") {
                        alert(response.value);
                        window.location.href = "../Index";
                    }
                    else {
                        alert(response.value);
                    }
                }
            });
        }
    });

    function isEditUserFormValid(formname) {
        $.validator.unobtrusive.parse(formname);
        var isvalidate = $(formname).validate().form();
        if (isvalidate) {
            return true;
        }
        return false;
    }
</script>

<script>
    $('#nestable').nestable({
        maxDepth: 5
    }).on('change', updateOutput);

    function updateOutput(e) {
        var list = e.length ? e : $(e.target),
            output = list.data('output');
        if (window.JSON) {
            if (output) {
                output.val(window.JSON.stringify(list.nestable('serialize')));
            }
        } else {
            alert('JSON browser support required for this page.');
        }
    }
</script>

create

@using Project_STSBackend.Helper.Model
@model Project_STSBackend.Helper.ViewModel.MenuMasterViewModel
<style>
    /**
         *  Nestable css
        */
    .dd {
        position: relative;
        display: block;
        margin: 0;
        padding: 0;
        max-width: 600px;
        list-style: none;
        font-size: 13px;
        line-height: 20px;
    }

    .dd-list {
        display: block;
        position: relative;
        margin: 0;
        padding: 0;
        list-style: none;
    }

        .dd-list .dd-list {
            padding-left: 30px;
        }

    .dd-collapsed .dd-list {
        display: none;
    }

    .dd-item,
    .dd-empty,
    .dd-placeholder {
        display: block;
        position: relative;
        margin: 0;
        padding: 0;
        min-height: 20px;
        font-size: 13px;
        line-height: 20px;
    }

    .dd-handle {
        display: block;
        height: 30px;
        margin: 5px 0;
        padding: 5px 10px;
        color: #333;
        text-decoration: none;
        font-weight: bold;
        border: 1px solid #ccc;
        background: #fafafa;
        background: -webkit-linear-gradient(top, #fafafa 0%, #eee 100%);
        background: -moz-linear-gradient(top, #fafafa 0%, #eee 100%);
        background: linear-gradient(top, #fafafa 0%, #eee 100%);
        -webkit-border-radius: 3px;
        border-radius: 3px;
        box-sizing: border-box;
        -moz-box-sizing: border-box;
        cursor: move;
        margin: 0 0 10px;
        background: #dbdbdb;
        /*    color: #6f6f6f;*/
        padding: 5px 12px
    }

        .dd-handle:hover {
            color: #2ea8e5;
            background: #fff;
        }

    .dd-item > button {
        /*  display: block;
                          position: relative;
                          cursor: pointer;
                          float: left;
                          width: 25px;
                          height: 20px;
                          margin: 5px 0;
                          padding: 0;
                          text-indent: 100%;
                          white-space: nowrap;
                          overflow: hidden;
                          border: 0;
                          background: transparent;
                          font-size: 12px;
                          line-height: 1;
                          text-align: center;
                          font-weight: bold;*/
        position: relative;
        cursor: pointer;
        float: left;
        width: 25px;
        height: 30px;
        margin: 0px 0px;
        padding: 0;
        text-indent: 100%;
        white-space: nowrap;
        overflow: hidden;
        border: 0;
        background: #4CAF50;
        font-size: 12px;
        line-height: 1;
        color: #fff;
        text-align: center;
        font-weight: bold;
    }

        .dd-item > button:before {
            content: '+';
            display: block;
            position: absolute;
            width: 100%;
            text-align: center;
            text-indent: 0;
        }

        .dd-item > button[data-action="collapse"]:before {
            content: '-';
        }

    .dd-placeholder,
    .dd-empty {
        margin: 5px 0;
        padding: 0;
        min-height: 30px;
        background: #f2fbff;
        border: 1px dashed #b6bcbf;
        box-sizing: border-box;
        -moz-box-sizing: border-box;
    }

    .dd-empty {
        border: 1px dashed #bbb;
        min-height: 100px;
        background-color: #e5e5e5;
        background-image: -webkit-linear-gradient(45deg, #fff 25%, transparent 25%, transparent 75%, #fff 75%, #fff), -webkit-linear-gradient(45deg, #fff 25%, transparent 25%, transparent 75%, #fff 75%, #fff);
        background-image: -moz-linear-gradient(45deg, #fff 25%, transparent 25%, transparent 75%, #fff 75%, #fff), -moz-linear-gradient(45deg, #fff 25%, transparent 25%, transparent 75%, #fff 75%, #fff);
        background-image: linear-gradient(45deg, #fff 25%, transparent 25%, transparent 75%, #fff 75%, #fff), linear-gradient(45deg, #fff 25%, transparent 25%, transparent 75%, #fff 75%, #fff);
        background-size: 60px 60px;
        background-position: 0 0, 30px 30px;
    }

    .dd-dragel {
        position: absolute;
        pointer-events: none;
        z-index: 9999;
    }

        .dd-dragel > .dd-item .dd-handle {
            margin-top: 0;
        }

        .dd-dragel .dd-handle {
            -webkit-box-shadow: 2px 4px 6px 0 rgba(0, 0, 0, .1);
            box-shadow: 2px 4px 6px 0 rgba(0, 0, 0, .1);
        }

    /**
                        * Nestable Extras
                        */
    .nestable-lists {
        display: block;
        clear: both;
        padding: 30px 0;
        width: 100%;
        border: 0;
        border-top: 2px solid #ddd;
        border-bottom: 2px solid #ddd;
    }

    #nestable-menu {
        padding: 0;
        margin: 20px 0;
    }

    #nestable-output,
    #nestable2-output {
        width: 100%;
        height: 7em;
        font-size: 0.75em;
        line-height: 1.333333em;
        font-family: Consolas, monospace;
        padding: 5px;
        box-sizing: border-box;
        -moz-box-sizing: border-box;
    }

    #nestable2 .dd-handle {
        color: #fff;
        border: 1px solid #999;
        background: #bbb;
        background: -webkit-linear-gradient(top, #bbb 0%, #999 100%);
        background: -moz-linear-gradient(top, #bbb 0%, #999 100%);
        background: linear-gradient(top, #bbb 0%, #999 100%);
    }

        #nestable2 .dd-handle:hover {
            background: #bbb;
        }

    #nestable2 .dd-item > button:before {
        color: #fff;
    }

    .dd {
        // float: left;
        // width: 48 %;
        width: 80%;
    }

        .dd + .dd {
            margin-left: 2%;
        }

    .dd-hover > .dd-handle {
        background: #2ea8e5 !important;
    }

    /**
                        * Nestable Draggable Handles
                        */
    .dd3-content {
        display: block;
        height: 30px;
        margin: 5px 0;
        padding: 5px 10px 5px 40px;
        color: #333;
        text-decoration: none;
        font-weight: bold;
        border: 1px solid #ccc;
        background: #fafafa;
        background: -webkit-linear-gradient(top, #fafafa 0%, #eee 100%);
        background: -moz-linear-gradient(top, #fafafa 0%, #eee 100%);
        background: linear-gradient(top, #fafafa 0%, #eee 100%);
        -webkit-border-radius: 3px;
        border-radius: 3px;
        box-sizing: border-box;
        -moz-box-sizing: border-box;
    }

        .dd3-content:hover {
            color: #2ea8e5;
            background: #fff;
        }

    .dd-dragel > .dd3-item > .dd3-content {
        margin: 0;
    }

    .dd3-item > button {
        margin-left: 30px;
    }

    .dd3-handle {
        position: absolute;
        margin: 0;
        left: 0;
        top: 0;
        cursor: pointer;
        width: 30px;
        text-indent: 100%;
        white-space: nowrap;
        overflow: hidden;
        border: 1px solid #aaa;
        background: #ddd;
        background: -webkit-linear-gradient(top, #ddd 0%, #bbb 100%);
        background: -moz-linear-gradient(top, #ddd 0%, #bbb 100%);
        background: linear-gradient(top, #ddd 0%, #bbb 100%);
        border-top-right-radius: 0;
        border-bottom-right-radius: 0;
    }

        .dd3-handle:before {
            content: '≡';
            display: block;
            position: absolute;
            left: 0;
            top: 3px;
            width: 100%;
            text-align: center;
            text-indent: 0;
            color: #fff;
            font-size: 20px;
            font-weight: normal;
        }

        .dd3-handle:hover {
            background: #ddd;
        }


    /*
                        * Nestable++
                        */
    .button-delete {
        position: absolute;
        top: 4px;
        right: -26px;
    }

    .button-edit {
        position: absolute;
        top: 4px;
        right: -52px;
    }

    #menu-editor {
        margin-top: 40px;
    }

    #saveButton {
        padding-right: 30px;
        padding-left: 30px;
    }

    .output-container {
        margin-top: 20px;
    }

    #json-output {
        margin-top: 20px;
    }

</style>

<h4>Create Menu</h4>
<br />
<form asp-action="CreateMenu" id="createmenurmasterfrm">
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    <div class="row">
        <div class="col-sm-6">
            <div class="form-group">
                @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "" })<span class="asterisk">*</span>
                @Html.EditorFor(m => m.Name, new { htmlAttributes = new { @class = "form-control", @id = "Name", placeholder = "Name" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="col-sm-6">
            <div class="form-group">
                @Html.LabelFor(model => model.Slug, htmlAttributes: new { @class = "" })<span class="asterisk">*</span>
                @Html.EditorFor(m => m.Slug, new { htmlAttributes = new { @class = "form-control", @id = "Slug", placeholder = "Slug", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.Slug, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="col-sm-12">
            <div class="form-group">
                @Html.LabelFor(model => model.PageIds, htmlAttributes: new { @class = "" })<span class="asterisk">*</span><br />
                @Html.DropDownListFor(m => m.PageIds, new SelectList(Model.PageList, "Id", "Name"), new { htmlAttributes = new { @class = "form-control select2" }, @id = "PageId", multiple = "multiple" })
                @Html.ValidationMessageFor(model => model.PageIds, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    <div class="col-md-12">

        <div class="dd nestable m-auto mb-2" id="nestable">
            <ol class="dd-list">
            </ol>
        </div>
    </div>

    <div class="mt-3">
        <div class="form-group">
            <input type="submit" value="Create" id="btncreate" class="btn btn-success" />
            <a href="@Url.Action("Index","MenuMaster")" class="btn btn-secondary">Back to List</a>
        </div>
    </div>


</form>


<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/Nestable/2012-10-15/jquery.nestable.min.js"></script>
<script>
    $(document).ready(function () {
        $("#PageId").select2();

        function toSlug(text) {
            return text.replace(/[^a-zA-Z0-9\s]/g, '').toLowerCase().replace(/\s+/g, '-');
        }

        $("#Name").on('input', function () {
            var Name = $(this).val();
            $("#Slug").val(toSlug(Name));
        });

        $('#PageId').on('change', function () {
            var selectedOptions = $(this).find('option:selected');
            var nestableList = $('#nestable .dd-list');

            nestableList.empty();

            selectedOptions.each(function () {
                var selectedText = $(this).text();
                var selectedValue = $(this).val();

                var existingItem = nestableList.find(`.dd-item[data-id='${selectedValue}']`);
                if (existingItem.length === 0) {
                    var div = document.createElement("div");
                    div.className = "dd-handle";
                    div.innerHTML = selectedText;

                    var li = document.createElement("li");
                    li.className = 'dd-item';
                    li.dataset.id = selectedValue;
                    li.dataset.name = selectedText;
                    li.dataset.slug = toSlug(selectedText) + '-slug';
                    li.dataset.new = '0';
                    li.dataset.deleted = '0';

                    li.appendChild(div);
                    nestableList.append(li);
                }
            });
        });

        function generateJSON() {
            // Use debugger to inspect the state if needed
            debugger;

            var nestableList = $('#nestable .dd-list');

            function parseListItems(list) {
                var result = [];

                list.children('li').each(function () {
                    var $li = $(this);
                    var item = {
                        PageId: $li.data('id'),
                        PageName: $li.data('name'),
                        PageSlug: $li.data('slug'),
                        new: $li.data('new'),
                        deleted: $li.data('deleted'),
                        children: []
                    };

                    // var childrenList = $li.children('ol.dd-list');
                    // if (childrenList.length) {
                    //     item.children = parseListItems(childrenList);
                    // }

                    result.push(item);
                    alert(JSON.stringify(item));
                });

                return result;
            }

             jsonPageData = parseListItems(nestableList);
            return jsonPageData;
        }



        //old
        // function generateJSON() {
        //     var nestableList = $('#nestable .dd-list');

        //     function parseListItems(list) {
        //         var result = [];

        //         list.children('li').each(function () {
        //             var $li = $(this);
        //             var item = {
        //                 PageId: $li.data('id'),
        //                 PageName: $li.data('name'),
        //                 PageSlug: $li.data('slug'),
        //                 new: $li.data('new'),
        //                 deleted: $li.data('deleted'),
        //                 children: parseListItems($li.find('> .dd-list'))
        //             };

        //             result.push(item);
        //         });

        //         return result;
        //     }

        //     jsonPageData = parseListItems(nestableList);
        // }

        $(document).undelegate('#btncreate', "click").delegate("#btncreate", "click", function (e) {
            e.preventDefault();

            generateJSON();

            var isformvalid = true;
            $('#createmenurmasterfrm').each(function () {
                if (!isCreateMenuMasterFormValid($(this))) {
                    isformvalid = false;
                }
            });

            if (!isformvalid) {
                return false;
            }

            if (isformvalid) {
                var pageId = $("#PageId").val().toString();
                $("#PageId").val(pageId);

                var formdata = $("#createmenurmasterfrm").serializeArray();
                formdata.push({ name: "PageIds", value: JSON.stringify(jsonPageData) });

                $.ajax({
                    method: "POST",
                    url: "@Url.Action("CreateMenu", "MenuMaster")",
                    data: formdata,
                    success: function (response) {
                        if (response.result == "Success") {
                            alert(response.value);
                            window.location.href = "/MenuMaster/Index";
                        } else {
                            alert(response.value);
                        }
                    },
                    error: function (xhr, status, error) {
                        var errorMessage = xhr.responseText;
                        alert(errorMessage);
                    }
                });
            }
        });

        function isCreateMenuMasterFormValid(formname) {
            $.validator.unobtrusive.parse(formname);
            var isvalidate = $(formname).validate().form();
            return isvalidate;
        }
    });

</script>
<script>
    $('#nestable').nestable({
        maxDepth: 5
    })
        .on('change', updateOutput);
    var updateOutput = function (e) {
        var list = e.length ? e : $(e.target),
            output = list.data('output');
        if (window.JSON) {
            if (output) {
                output.val(window.JSON.stringify(list.nestable('serialize')));
            }
        } else {
            alert('JSON browser support required for this page.');
        }
    };



    // $(document).ready(function () {
    //     $('#PageId').on('change', function () {
    //         var selectedOptions = $(this).find('option:selected');
    //         var nestableList = $('#nestable .dd-list');

    //         nestableList.empty();

    //         selectedOptions.each(function () {
    //             var selectedText = $(this).text();
    //             var selectedValue = $(this).val();

    //             var existingItem = nestableList.find(`.dd-item[data-id='${selectedValue}']`);
    //             if (existingItem.length === 0) {
    //                 var div = document.createElement("div");
    //                 div.className = "dd-handle";
    //                 div.innerHTML = selectedText;

    //                 var li = document.createElement("li");
    //                 li.className = 'dd-item';
    //                 li.dataset.id = selectedValue;
    //                 li.dataset.name = selectedText;
    //                 li.dataset.slug = selectedText.toLowerCase().replace(/\s+/g, '-') + '-slug';
    //                 li.dataset.new = '0';
    //                 li.dataset.deleted = '0';

    //                 li.appendChild(div);
    //                 nestableList.append(li);
    //             }
    //         });
    //     });
    // });
    // $(document).ready(function () {
    //     $(document).on('change', '#PageId', function (e) {
    //         var selectedOption = $('option:selected', this);
    //         var selectedText = selectedOption.text();
    //         var selectedValue = selectedOption.val();

    //         alert(selectedText);
    //         if (selectedText != null) {
    //             var div = document.createElement("div");
    //             div.className = "dd-handle";
    //             div.innerHTML = selectedText;

    //             var li = document.createElement("li");
    //             li.className = 'dd-item';
    //             li.dataset.id = selectedValue;
    //             li.dataset.name = selectedText;
    //             li.dataset.slug = selectedText.toLowerCase().replace(/\s+/g, '-') + '-slug';
    //             li.dataset.new = '0';
    //             li.dataset.deleted = '0';

    //             li.appendChild(div);

    //             var nestableContainer = document.getElementById("nestable");
    //             nestableContainer.appendChild(li);
    //         }

    //     });
    // });
</script>